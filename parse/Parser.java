
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri May 22 11:19:59 CEST 2015
//----------------------------------------------------

package parse;

import java_cup.runtime.*;
import absyn.*;
import sym.Sym;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri May 22 11:19:59 CEST 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\002\000\002\006\003\000\002\006\003" +
    "\000\002\011\007\000\002\012\003\000\002\012\010\000" +
    "\002\013\013\000\002\005\002\000\002\005\004\000\002" +
    "\007\007\000\002\014\002\000\002\014\004\000\002\015" +
    "\003\000\002\015\005\000\002\015\006\000\002\015\007" +
    "\000\002\015\011\000\002\015\007\000\002\015\007\000" +
    "\002\024\003\000\002\024\003\000\002\025\006\000\002" +
    "\023\002\000\002\023\003\000\002\023\005\000\002\004" +
    "\002\000\002\004\003\000\002\004\005\000\002\010\005" +
    "\000\002\010\006\000\002\020\005\000\002\020\005\000" +
    "\002\020\003\000\002\021\005\000\002\021\005\000\002" +
    "\021\003\000\002\022\005\000\002\022\003\000\002\022" +
    "\003\000\002\022\004\000\002\016\003\000\002\016\003" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\010\002\ufffe\007\012\011\011\001\002\000" +
    "\010\002\ufffe\007\012\011\011\001\002\000\004\002\161" +
    "\001\002\000\004\002\000\001\002\000\010\002\ufffd\007" +
    "\ufffd\011\ufffd\001\002\000\010\002\ufffc\007\ufffc\011\ufffc" +
    "\001\002\000\004\041\026\001\002\000\004\041\013\001" +
    "\002\000\004\030\014\001\002\000\006\004\017\041\016" +
    "\001\002\000\004\040\025\001\002\000\010\017\ufffa\037" +
    "\ufffa\040\ufffa\001\002\000\004\020\020\001\002\000\004" +
    "\042\021\001\002\000\004\021\022\001\002\000\004\010" +
    "\023\001\002\000\006\004\017\041\016\001\002\000\010" +
    "\017\ufff9\037\ufff9\040\ufff9\001\002\000\010\002\ufffb\007" +
    "\ufffb\011\ufffb\001\002\000\004\016\027\001\002\000\010" +
    "\012\030\017\uffe5\041\031\001\002\000\004\041\156\001" +
    "\002\000\004\036\154\001\002\000\004\017\036\001\002" +
    "\000\006\017\uffe4\037\034\001\002\000\010\012\030\017" +
    "\uffe5\041\031\001\002\000\004\017\uffe3\001\002\000\004" +
    "\022\037\001\002\000\020\005\ufff7\013\040\014\ufff7\022" +
    "\ufff7\023\ufff7\040\ufff7\041\ufff7\001\002\000\004\041\150" +
    "\001\002\000\016\005\050\014\044\022\051\023\ufff4\040" +
    "\046\041\045\001\002\000\020\005\ufff7\013\040\014\ufff7" +
    "\022\ufff7\023\ufff7\040\ufff7\041\ufff7\001\002\000\016\005" +
    "\ufff6\014\ufff6\022\ufff6\023\ufff6\040\ufff6\041\ufff6\001\002" +
    "\000\004\016\144\001\002\000\010\015\uffeb\016\135\020" +
    "\uffeb\001\002\000\020\005\ufff2\006\ufff2\014\ufff2\022\ufff2" +
    "\023\ufff2\040\ufff2\041\ufff2\001\002\000\006\015\132\020" +
    "\126\001\002\000\004\016\061\001\002\000\016\005\050" +
    "\014\044\022\051\023\ufff4\040\046\041\045\001\002\000" +
    "\042\015\uffea\017\uffea\020\uffea\021\uffea\024\uffea\025\uffea" +
    "\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034" +
    "\uffea\035\uffea\037\uffea\040\uffea\001\002\000\016\005\050" +
    "\014\044\022\051\023\ufff4\040\046\041\045\001\002\000" +
    "\004\023\055\001\002\000\010\002\ufff8\007\ufff8\011\ufff8" +
    "\001\002\000\004\023\ufff3\001\002\000\004\023\060\001" +
    "\002\000\020\005\ufff1\006\ufff1\014\ufff1\022\ufff1\023\ufff1" +
    "\040\ufff1\041\ufff1\001\002\000\012\016\072\025\062\041" +
    "\063\042\065\001\002\000\012\016\072\025\062\041\063" +
    "\042\065\001\002\000\040\017\uffeb\020\uffeb\021\uffeb\024" +
    "\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\035\uffeb\037\uffeb\040\uffeb\001\002\000" +
    "\004\017\uffd6\001\002\000\036\017\uffd9\021\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\037\uffd9\040\uffd9\001\002\000\036" +
    "\017\uffde\021\uffde\024\uffde\025\uffde\026\105\027\106\030" +
    "\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\037\uffde" +
    "\040\uffde\001\002\000\040\017\uffd8\020\126\021\uffd8\024" +
    "\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\034\uffd8\035\uffd8\037\uffd8\040\uffd8\001\002\000" +
    "\036\017\uffdb\021\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb" +
    "\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\037" +
    "\uffdb\040\uffdb\001\002\000\024\017\uffd5\024\102\025\103" +
    "\030\112\031\117\032\113\033\115\034\114\035\116\001" +
    "\002\000\012\016\072\025\062\041\063\042\065\001\002" +
    "\000\004\017\074\001\002\000\014\005\050\014\044\022" +
    "\051\040\046\041\045\001\002\000\020\005\uffef\006\076" +
    "\014\uffef\022\uffef\023\uffef\040\uffef\041\uffef\001\002\000" +
    "\014\005\050\014\044\022\051\040\046\041\045\001\002" +
    "\000\020\005\uffee\006\uffee\014\uffee\022\uffee\023\uffee\040" +
    "\uffee\041\uffee\001\002\000\010\017\101\024\102\025\103" +
    "\001\002\000\036\017\uffda\021\uffda\024\uffda\025\uffda\026" +
    "\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda" +
    "\035\uffda\037\uffda\040\uffda\001\002\000\012\016\072\025" +
    "\062\041\063\042\065\001\002\000\012\016\072\025\062" +
    "\041\063\042\065\001\002\000\036\017\uffdf\021\uffdf\024" +
    "\uffdf\025\uffdf\026\105\027\106\030\uffdf\031\uffdf\032\uffdf" +
    "\033\uffdf\034\uffdf\035\uffdf\037\uffdf\040\uffdf\001\002\000" +
    "\012\016\072\025\062\041\063\042\065\001\002\000\012" +
    "\016\072\025\062\041\063\042\065\001\002\000\036\017" +
    "\uffdc\021\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\037\uffdc\040" +
    "\uffdc\001\002\000\036\017\uffdd\021\uffdd\024\uffdd\025\uffdd" +
    "\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034" +
    "\uffdd\035\uffdd\037\uffdd\040\uffdd\001\002\000\036\017\uffe0" +
    "\021\uffe0\024\uffe0\025\uffe0\026\105\027\106\030\uffe0\031" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\037\uffe0\040\uffe0" +
    "\001\002\000\012\016\072\025\062\041\063\042\065\001" +
    "\002\000\012\016\072\025\062\041\063\042\065\001\002" +
    "\000\012\016\072\025\062\041\063\042\065\001\002\000" +
    "\012\016\072\025\062\041\063\042\065\001\002\000\012" +
    "\016\072\025\062\041\063\042\065\001\002\000\012\016" +
    "\072\025\062\041\063\042\065\001\002\000\010\017\uffcf" +
    "\024\102\025\103\001\002\000\010\017\uffd1\024\102\025" +
    "\103\001\002\000\010\017\uffd3\024\102\025\103\001\002" +
    "\000\010\017\uffd2\024\102\025\103\001\002\000\010\017" +
    "\uffd4\024\102\025\103\001\002\000\010\017\uffd0\024\102" +
    "\025\103\001\002\000\012\016\072\025\062\041\063\042" +
    "\065\001\002\000\010\021\130\024\102\025\103\001\002" +
    "\000\042\015\uffe9\017\uffe9\020\uffe9\021\uffe9\024\uffe9\025" +
    "\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9" +
    "\034\uffe9\035\uffe9\037\uffe9\040\uffe9\001\002\000\036\017" +
    "\uffd7\021\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\037\uffd7\040" +
    "\uffd7\001\002\000\012\016\072\025\062\041\063\042\065" +
    "\001\002\000\010\024\102\025\103\040\134\001\002\000" +
    "\020\005\ufff0\006\ufff0\014\ufff0\022\ufff0\023\ufff0\040\ufff0" +
    "\041\ufff0\001\002\000\014\016\072\017\uffe8\025\062\041" +
    "\063\042\065\001\002\000\004\017\142\001\002\000\012" +
    "\017\uffe7\024\102\025\103\037\140\001\002\000\014\016" +
    "\072\017\uffe8\025\062\041\063\042\065\001\002\000\004" +
    "\017\uffe6\001\002\000\004\040\143\001\002\000\020\005" +
    "\uffec\006\uffec\014\uffec\022\uffec\023\uffec\040\uffec\041\uffec" +
    "\001\002\000\012\016\072\025\062\041\063\042\065\001" +
    "\002\000\004\017\146\001\002\000\014\005\050\014\044" +
    "\022\051\040\046\041\045\001\002\000\020\005\uffed\006" +
    "\uffed\014\uffed\022\uffed\023\uffed\040\uffed\041\uffed\001\002" +
    "\000\004\036\151\001\002\000\006\004\017\041\016\001" +
    "\002\000\004\040\153\001\002\000\020\005\ufff5\013\ufff5" +
    "\014\ufff5\022\ufff5\023\ufff5\040\ufff5\041\ufff5\001\002\000" +
    "\006\004\017\041\016\001\002\000\006\017\uffe2\037\uffe2" +
    "\001\002\000\004\036\157\001\002\000\006\004\017\041" +
    "\016\001\002\000\006\017\uffe1\037\uffe1\001\002\000\004" +
    "\002\001\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\014\002\004\003\005\006\003\011\006\013" +
    "\007\001\001\000\012\003\161\006\003\011\006\013\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\031\010\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\034\010\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\040\007\041\001\001\000\002\001\001" +
    "\000\012\014\053\015\052\024\046\025\051\001\001\000" +
    "\006\005\042\007\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\014\056\015\052\024\046" +
    "\025\051\001\001\000\002\001\001\000\012\014\055\015" +
    "\052\024\046\025\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\016\072\017\063\020\070\021\065\022\067" +
    "\024\066\025\051\001\001\000\010\022\130\024\066\025" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\020\077\021\065\022\067" +
    "\024\066\025\051\001\001\000\002\001\001\000\010\015" +
    "\074\024\046\025\051\001\001\000\002\001\001\000\010" +
    "\015\076\024\046\025\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\021\110\022\067" +
    "\024\066\025\051\001\001\000\012\021\103\022\067\024" +
    "\066\025\051\001\001\000\002\001\001\000\010\022\107" +
    "\024\066\025\051\001\001\000\010\022\106\024\066\025" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\020\124\021\065\022\067\024\066\025" +
    "\051\001\001\000\014\020\123\021\065\022\067\024\066" +
    "\025\051\001\001\000\014\020\122\021\065\022\067\024" +
    "\066\025\051\001\001\000\014\020\121\021\065\022\067" +
    "\024\066\025\051\001\001\000\014\020\120\021\065\022" +
    "\067\024\066\025\051\001\001\000\014\020\117\021\065" +
    "\022\067\024\066\025\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\020\126\021\065\022" +
    "\067\024\066\025\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\020\132\021\065\022" +
    "\067\024\066\025\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\020\136\021\065\022\067\023\135\024" +
    "\066\025\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\020\136\021\065\022\067\023\140\024\066\025" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\016\144\017\063\020\070\021\065\022" +
    "\067\024\066\025\051\001\001\000\002\001\001\000\010" +
    "\015\146\024\046\025\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public void syntax_error(Symbol currToken) {
    System.out.println(
      "**** Error: syntax error" +
      " in line " + currToken.left +
      ", column " + currToken.right 
    );
    System.exit(0);
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr_comp ::= expr NE expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExp(e1left, e1right, OpExp.NEQ, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_comp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr_comp ::= expr EQ expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExp(e1left, e1right, OpExp.EQU, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_comp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr_comp ::= expr GE expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExp(e1left, e1right, OpExp.GRE, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_comp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr_comp ::= expr GT expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExp(e1left, e1right, OpExp.GRT, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_comp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr_comp ::= expr LE expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExp(e1left, e1right, OpExp.LSE, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_comp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr_comp ::= expr LT expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExp(e1left, e1right, OpExp.LST, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_comp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr_ext ::= expr 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_ext",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr_ext ::= expr_comp 
            {
              Exp RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp ec = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ec; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_ext",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // faktor ::= MINUS faktor 
            {
              Exp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExp(mleft, mright, OpExp.MUL, new IntExp(fleft,fright, -1), f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("faktor",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // faktor ::= left_hand 
            {
              Exp RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Var lhs = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VarExp(lhsleft, lhsright, lhs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("faktor",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // faktor ::= INTLIT 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int i = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntExp(ileft, iright, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("faktor",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // faktor ::= LPAREN expr RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("faktor",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // term ::= faktor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // term ::= term SLASH faktor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExp(tleft, tright, OpExp.DIV, t, f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // term ::= term STAR faktor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExp(tleft, tright, OpExp.MUL, t, f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr MINUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExp(eleft, eright, OpExp.SUB, e, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExp(eleft, eright, OpExp.ADD, e, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parameter ::= REF IDENT COLON type 
            {
              Dec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParDec(ileft, iright, Sym.newSym(i), ty, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parameter ::= IDENT COLON type 
            {
              Dec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParDec(ileft, iright, Sym.newSym(i), ty, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parameter_list ::= parameter COMMA parameter_list 
            {
              DecList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dec p = (Dec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DecList pList = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DecList(p, pList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parameter_list ::= parameter 
            {
              DecList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dec p = (Dec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DecList(p, new DecList()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parameter_list ::= 
            {
              DecList RESULT =null;
		 RESULT = new DecList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // arg_list ::= expr COMMA arg_list 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList aList = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpList(e, aList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // arg_list ::= expr 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpList(e, new ExpList()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // arg_list ::= 
            {
              ExpList RESULT =null;
		 RESULT = new ExpList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // array ::= left_hand LBRACK expr RBRACK 
            {
              Var RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Var lhs = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayVar(lhsleft, lhsright, lhs, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // left_hand ::= array 
            {
              Var RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Var a = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("left_hand",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // left_hand ::= IDENT 
            {
              Var RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SimpleVar(ileft, iright, Sym.newSym(i)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("left_hand",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= IDENT LPAREN arg_list RPAREN SEMIC 
            {
              Stm RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpList aList = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new CallStm(ileft, iright, Sym.newSym(i), aList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= WHILE LPAREN expr_ext RPAREN statement 
            {
              Stm RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Symbol w = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp ee = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stm stm = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WhileStm(wleft, wright, ee, stm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= IF LPAREN expr_ext RPAREN statement ELSE statement 
            {
              Stm RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp ee = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int stm1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stm1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stm stm1 = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stm2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stm2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stm stm2 = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStm(ileft, iright, ee, stm1, stm2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= IF LPAREN expr_ext RPAREN statement 
            {
              Stm RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp ee = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stm stm = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStm(ileft, iright, ee, stm, new EmptyStm(ileft, iright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= left_hand ASGN expr SEMIC 
            {
              Stm RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Var lhs = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AssignStm(lhsleft, lhsright, lhs, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= LCURL statement_list RCURL 
            {
              Stm RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmList sList = (StmList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CompStm(lleft, lright, sList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= SEMIC 
            {
              Stm RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new EmptyStm(sleft, sright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement_list ::= statement statement_list 
            {
              StmList RESULT =null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stm stm = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StmList sList = (StmList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StmList(stm, sList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement_list ::= 
            {
              StmList RESULT =null;
		 RESULT = new StmList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaration ::= VAR IDENT COLON type SEMIC 
            {
              Dec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDec(ileft, iright, Sym.newSym(i), ty); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration_list ::= declaration declaration_list 
            {
              DecList RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DecList dList = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DecList(dec, dList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration_list ::= 
            {
              DecList RESULT =null;
		 RESULT = new DecList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // proc_def ::= PROC IDENT LPAREN parameter_list RPAREN LCURL declaration_list statement_list RCURL 
            {
              ProcDec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int parListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int parListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		DecList parList = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DecList decList = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stmListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmList stmList = (StmList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ProcDec(ileft, iright, Sym.newSym(i), parList, decList, stmList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("proc_def",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= ARRAY LBRACK INTLIT RBRACK OF type 
            {
              Ty RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Symbol a = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		int i = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayTy(aleft, aright, i, ty); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= IDENT 
            {
              Ty RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NameTy(ileft, iright, Sym.newSym(i));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type_dec ::= TYPE IDENT EQ type SEMIC 
            {
              TypeDec RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TypeDec(tleft, tright, Sym.newSym(i), ty); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dec",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec_elem ::= proc_def 
            {
              Dec RESULT =null;
		int pDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ProcDec pD = (ProcDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pD; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_elem",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_elem ::= type_dec 
            {
              Dec RESULT =null;
		int tDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeDec tD = (TypeDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tD; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_elem",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_list ::= 
            {
              DecList RESULT =null;
		 RESULT = new DecList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // dec_list ::= dec_elem dec_list 
            {
              DecList RESULT =null;
		int dEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dec dE = (Dec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DecList list = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DecList(dE, list); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= dec_list 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DecList list = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

